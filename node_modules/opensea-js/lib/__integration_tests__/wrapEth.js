"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const utils_1 = require("ethers/lib/utils");
const mocha_1 = require("mocha");
const init_1 = require("./init");
const types_1 = require("../types");
const tokens_1 = require("../utils/tokens");
// Skip this test if there is no ETH to wrap/unwrap
(init_1.ETH_TO_WRAP ? mocha_1.describe.only : mocha_1.describe.skip)("SDK: WETH", () => {
    (0, mocha_1.test)("Wrap ETH and Unwrap", () => __awaiter(void 0, void 0, void 0, function* () {
        const wethAsset = {
            tokenAddress: (0, tokens_1.getCanonicalWrappedEther)(types_1.Network.Main).address,
            tokenId: null,
            tokenStandard: types_1.TokenStandard.ERC20,
        };
        const startingWethBalance = yield init_1.sdk.getBalance({
            accountAddress: init_1.walletAddress,
            asset: wethAsset,
        });
        const startingWeth = (0, utils_1.formatEther)(startingWethBalance.toString());
        console.log(`Starting Weth: ${startingWeth}`);
        const ethToWrap = Number(init_1.ETH_TO_WRAP);
        yield init_1.sdk.wrapEth({
            amountInEth: ethToWrap,
            accountAddress: init_1.walletAddress,
        });
        const newWethBalance = yield init_1.sdk.getBalance({
            accountAddress: init_1.walletAddress,
            asset: wethAsset,
        });
        const newWeth = (0, utils_1.formatEther)(newWethBalance.toString());
        console.log(`New Weth: ${newWeth}`);
        (0, chai_1.assert)(Number(startingWeth) + Number(ethToWrap) === Number(newWeth), "Balances should match.");
        yield init_1.sdk.unwrapWeth({
            amountInEth: ethToWrap,
            accountAddress: init_1.walletAddress,
        });
        const finalWethBalance = yield init_1.sdk.getBalance({
            accountAddress: init_1.walletAddress,
            asset: wethAsset,
        });
        const finalWeth = (0, utils_1.formatEther)(finalWethBalance.toString());
        console.log(`Final Weth: ${finalWeth}`);
        (0, chai_1.assert)(Number(startingWeth) === Number(finalWeth), "Balances should match.");
    })).timeout(30000);
});
//# sourceMappingURL=wrapEth.js.map